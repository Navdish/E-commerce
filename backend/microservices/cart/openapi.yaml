openapi: "3.0.0"
info: 
  title: E-commerce Carts

  version: "1.0.0"
  description: Carts service of E-commerce Website
servers:
  - url: http://localhost:9005
paths: 
  /Carts:
    get: 
      tags:
        - Carts
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
        - name: 'userId'
          in: query
          description: User Id
          schema:
            type: string
      summary: Get all the products/ if userId is provided, get Carts of userId
      description: Get all the products/ if userId is provided, get Carts of userId
      
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carts"
        "204":
          description: Successful operation, no data found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    example: []
        '401':
          description: Unauthorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is not valid, 1234 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User making the request not found
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
       - Carts
      summary: Add a new Cart
      description: Create a new Cart
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
      requestBody:
        description: Request to create Product
        content:
          application/json:
            schema:
              type: object
              properties:
                productId :
                  type: string

        required: true
      responses:
        '201':
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        '409':
            description: Conflict
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: The provided Cart already exists
        '422':
          description: User credentials not provided
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
        '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
  /Carts/:CartId:
    put:
      tags:
        - Carts
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
        - name: 'CartId'
          in: path
          required: true
          description: Cart uuid
          schema:
            type: string
      requestBody:
        description: Request to update Cart
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
        required: true
      summary: Edit the Cart
      description: Updates the Cart
      
      responses:
        '200':
          description: Cart updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: object
                    $ref: "#/components/schemas/Cart"
                  message:
                    type: string
                    example: Cart edited successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cart not found
        '401':
          description: Unauthorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is not authorised to make update, 1234 
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    delete:
      tags:
        - Carts
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User token
          example: "xhuaiuhsiuxh.aixsbisu.sxiabixia"
          schema:
            type: object
            format: JSON
        - name: 'CartId'
          in: path
          required: true
          description: Cart uuid
          example: jkasnjsaanxjakjsxnlas
          schema:
            type: string
      summary: Delete the Cart
      description: Deletes the Cart
      responses:
        '200':
          description: Cart deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    $ref: "#/components/schemas/Cart"
                  message:
                    type: string
                    example: Post deleted successfully.
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided CartId is not valid
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cart not found
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    get: 
      tags:
        - Carts
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
        - name: 'CartId'
          in: path
          required: true
          description: Cart uuid
          example: jkasnjsaanxjakjsxnlas
          schema:
            type: string
      summary: Get the specific Cart
      description: Get the Cart from CartId
      
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        '401':
          description: Unauthorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is not valid, 1234 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User making the request not found
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  schemas:
    Token:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
            iat:
              type: string
            expat:
              type: string
    Product:
      type: object
      properties:
          retailerId:
            type: string
          uuid:
            type: string
          name:
            type: string
          description:
            type: string
          images:
            type: array
            items:
              type: string
          reviews:
            type: array
            items:
              type: string
          properties:
            type: object
          createdAt:
            type: string
            description: created date
            format: date-time
          updatedAt:
            type: string
            description: updated date
            format: date-time
      required:
        - retailerId
        - uuid
        - name
        - description
        - images

    User:
      type: object
      properties:
        uuid:
          type: string
        role: 
          type: string
          enum:
              - USER
              - RETAILER
              - RETAILERMANAGER
              - DELIEVERYPARTNER
              - DELIVERYMANAGER
              - SUPERADMIN
          default: USER

    
    Cart:
      type: object
      properties:
        uuid:
          type: string
        productId:
          type: string
          $ref: '#/components/schemas/Product'
        userId:
          type: string
          $ref: '#/components/schemas/User'
        status: 
            type: string
            enum:
                - QUEUED
                - SHIPPED
                - STORE
                - DISPATCHED
                - RECIEVED
                - DAMAGED
                - WRONG
                - RETURNED
            default: QUEUED
        quantity: 
            type: number
        price:
            type: number

    Carts:
      type: array
      items:
        type: object
        properties:
          uuid:
            type: string
          productId:
            type: string
            $ref: '#/components/schemas/Product'
          userId:
            type: string
            $ref: '#/components/schemas/User'
          quantity: 
            type: number
          
