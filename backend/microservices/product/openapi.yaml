openapi: "3.0.0"
info: 
  title: E-commerce Products

  version: "1.0.0"
  description: Product service of E-commerce Website
servers:
  - url: http://localhost:8095
paths: 
  /products:
    get: 
      tags:
        - products
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
        - name: 'userId'
          in: query
          description: User Id
          schema:
            type: string
      summary: Get all the products/ if userId is provided, get products of userId
      description: Get all the products/ if userId is provided, get products of userId
      
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        "204":
          description: Successful operation, no data found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    example: []
        '401':
          description: Unauthorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is not valid, 1234 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User making the request not found
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    post:
      tags:
       - products
      summary: Add a new Product
      description: Create a new product
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
      requestBody:
        description: Request to create Product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPayload'
        required: true
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '409':
            description: Conflict
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: The provided email already exists
        '422':
          description: User credentials not provided
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
        '500':
            description: Internal server error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
  /products/:productId:
    put:
      tags:
        - products
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
        - name: 'productId'
          in: path
          required: true
          description: product uuid
          schema:
            type: string
      requestBody:
        description: Request to create Product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductPayload'
        required: true
      summary: Edit the product
      description: Updates the product
      
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  product:
                    type: object
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
                    example: product edited successfully.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: product not found
        '401':
          description: Unauthorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is not authorised to make update, 1234 
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    delete:
      tags:
        - products
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User token
          example: "xhuaiuhsiuxh.aixsbisu.sxiabixia"
          schema:
            type: object
            format: JSON
        - name: 'productId'
          in: path
          required: true
          description: product uuid
          example: jkasnjsaanxjakjsxnlas
          schema:
            type: string
      summary: Delete the user
      description: Deletes the user
      responses:
        '200':
          description: product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    $ref: "#/components/schemas/Product"
                  message:
                    type: string
                    example: Post deleted successfully.
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided productId is not valid
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Product not found
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    get: 
      tags:
        - products
      parameters:
        - name: 'token'
          in: header
          required: true
          description: User ID token
          schema:
            $ref: '#/components/schemas/Token'
        - name: 'productId'
          in: path
          required: true
          description: product uuid
          example: jkasnjsaanxjakjsxnlas
          schema:
            type: string
      summary: Get the specific product
      description: Get the product from productId
      
      responses:
        "200":
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        '401':
          description: Unauthorized 
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is not valid, 1234 
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User making the request not found
        "498":
          description: Authentication token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: The provided userID is null.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  schemas:
    Token:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
            iat:
              type: string
            expat:
              type: string
    Product:
      type: object
      properties:
          retailerId:
            type: string
          uuid:
            type: string
          name:
            type: string
          description:
            type: string
          images:
            type: array
            items:
              type: string
          reviews:
            type: array
            items:
              type: string
          properties:
            type: object
          createdAt:
            type: string
            description: created date
            format: date-time
          updatedAt:
            type: string
            description: updated date
            format: date-time
      required:
        - retailerId
        - uuid
        - name
        - description
        - images
    Products:
      type: array
      items:
        type: object
        properties:
          retailerId:
            type: string
          uuid:
            type: string
          name:
            type: string
          description:
            type: string
          images:
            type: array
            items:
              type: string
          reviews:
            type: array
            items:
              type: string
          properties:
            type: object
          createdAt:
            type: string
            description: created date
            format: date-time
          updatedAt:
            type: string
            description: updated date
            format: date-time

    User:
      type: object
      properties:
        uuid:
          type: string
        role: 
          type: string
          enum:
              - USER
              - RETAILER
              - RETAILERMANAGER
              - DELIEVERYPARTNER
              - DELIVERYMANAGER
              - SUPERADMIN
          default: USER

    ProductPayload:
      type: object
      properties:
          name:
            type: string
          description:
            type: string
          images:
            type: array
            items:
              type: string
          reviews:
            type: array
            items:
              type: string
          properties:
            type: object
      required:
        - name
        - description
        - images
    